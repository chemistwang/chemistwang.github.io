<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React on Chemputer Blog</title><link>https://chemistwang.github.io/categories/react/</link><description>Recent content in React on Chemputer Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 06 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://chemistwang.github.io/categories/react/index.xml" rel="self" type="application/rss+xml"/><item><title>「web安全漏洞」前端源代码泄漏</title><link>https://chemistwang.github.io/post/react/nosourcemap/</link><pubDate>Sat, 06 May 2023 00:00:00 +0000</pubDate><guid>https://chemistwang.github.io/post/react/nosourcemap/</guid><description>默认 npm run build 执行打包会生成 .js.map 文件。 为了防止源码被还原，解决方案如下： 1. 通过设置 script ... &amp;#34;scripts&amp;#34;: { &amp;#34;dev&amp;#34;: &amp;#34;craco start&amp;#34;, &amp;#34;start&amp;#34;: &amp;#34;craco start&amp;#34;, &amp;#34;build-darwin&amp;#34;: &amp;#34;export GENERATE_SOURCEMAP=false &amp;amp;&amp;amp; craco build&amp;#34;, &amp;#34;build-win32&amp;#34;: &amp;#34;set GENERATE_SOURCEMAP=false &amp;amp;&amp;amp; craco build&amp;#34;, &amp;#34;test&amp;#34;: &amp;#34;craco test&amp;#34;, &amp;#34;eject&amp;#34;: &amp;#34;react-scripts eject&amp;#34;, &amp;#34;lint&amp;#34;: &amp;#34;eslint src --ext</description></item><item><title>React Flow</title><link>https://chemistwang.github.io/post/react/react-flow/</link><pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate><guid>https://chemistwang.github.io/post/react/react-flow/</guid><description>React Flow React Flow</description></item><item><title>HOC</title><link>https://chemistwang.github.io/post/react/hoc/</link><pubDate>Thu, 29 Sep 2022 00:00:00 +0000</pubDate><guid>https://chemistwang.github.io/post/react/hoc/</guid><description/></item><item><title>错误边界</title><link>https://chemistwang.github.io/post/react/error-boundary/</link><pubDate>Thu, 29 Sep 2022 00:00:00 +0000</pubDate><guid>https://chemistwang.github.io/post/react/error-boundary/</guid><description>错误边界</description></item><item><title>react优化手段</title><link>https://chemistwang.github.io/post/react/optimize/</link><pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate><guid>https://chemistwang.github.io/post/react/optimize/</guid><description/></item><item><title>React-Router 源码</title><link>https://chemistwang.github.io/post/react/react-router/</link><pubDate>Wed, 31 Aug 2022 00:00:00 +0000</pubDate><guid>https://chemistwang.github.io/post/react/react-router/</guid><description/></item><item><title>CRA项目升级Vite</title><link>https://chemistwang.github.io/post/react/upgrade-to-vite/</link><pubDate>Tue, 23 Aug 2022 00:00:00 +0000</pubDate><guid>https://chemistwang.github.io/post/react/upgrade-to-vite/</guid><description>截止当前，46.6k 的 🌟 直逼 webpack。 vite 官网 👈 vite github 👈 由于维护的老项目体积较大，启动比较慢，同时需要借助 jenkins 实现自动化部署，存在多局点多分</description></item><item><title>如何避免重复渲染</title><link>https://chemistwang.github.io/post/react/avoid-rerender/</link><pubDate>Tue, 16 Aug 2022 00:00:00 +0000</pubDate><guid>https://chemistwang.github.io/post/react/avoid-rerender/</guid><description/></item><item><title>「React源码之五」 Reconciler 工作阶段【render阶段】</title><link>https://chemistwang.github.io/post/react/reconciler/</link><pubDate>Wed, 10 Aug 2022 00:00:00 +0000</pubDate><guid>https://chemistwang.github.io/post/react/reconciler/</guid><description>导读 因为是 【render 阶段】，所以会包含 mount（初始化） 和 update（更新） 两种情况。 双缓存池 这个是 React 实现更新的一个策略。可以追溯在</description></item><item><title>「React源码之四」【前置知识二】 Fiber</title><link>https://chemistwang.github.io/post/react/fiber/</link><pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate><guid>https://chemistwang.github.io/post/react/fiber/</guid><description>Fiber vs Stack Demo 👈 结构 源码位置： react/packages/react-reconciler/src/ReactFiber.old.js 👈 function FiberNode( tag: WorkTag, pendingProps: mixed, key: null | string, mode: TypeOfMode, ) { // Instance this.tag = tag; this.key = key; this.elementType = null; this.type = null; this.stateNode = null; // Fiber this.return = null; this.child = null; this.sibling = null; this.index = 0; this.ref = null; this.pendingProps = pendingProps; this.memoizedProps = null; this.updateQueue =</description></item><item><title>「React源码之三」【前置知识一】JSX</title><link>https://chemistwang.github.io/post/react/jsx/</link><pubDate>Fri, 05 Aug 2022 00:00:00 +0000</pubDate><guid>https://chemistwang.github.io/post/react/jsx/</guid><description>在准备步入 Reconciler 阶段之前，先了解下 JSX 将会如何被编译，并且编译之后的对象会有哪些属性。 JSX to Fiber 在 Babel 官网中，下面这个例子 function hello() { return &amp;lt;div id=&amp;#34;hello&amp;#34;&amp;gt; &amp;lt;h1 className=&amp;#34;title&amp;#34;&amp;gt;This is Header&amp;lt;/h1&amp;gt; &amp;lt;span&amp;gt;This is Content&amp;lt;/span&amp;gt; &amp;lt;a&amp;gt;link&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt;</description></item><item><title>「React源码之二」 导读</title><link>https://chemistwang.github.io/post/react/react-pre-read/</link><pubDate>Thu, 04 Aug 2022 00:00:00 +0000</pubDate><guid>https://chemistwang.github.io/post/react/react-pre-read/</guid><description>对于源码的阅读一开始一定要不求甚解 查看源码剔除细节上的判断语句 重大版本更新 一开始不妨介绍下 React 的几个重大的节点。正所谓了解一个框架就要了解它的</description></item><item><title>「React源码之一」 搭建源码调试环境</title><link>https://chemistwang.github.io/post/react/react-debug-env/</link><pubDate>Wed, 03 Aug 2022 00:00:00 +0000</pubDate><guid>https://chemistwang.github.io/post/react/react-debug-env/</guid><description>实现目标：在 VSCode 中执行断点调试 官方Github仓库中 👈 的 React原始源码 并可以定位到具体文件 版本说明：React18.02 思路说明：利用源码</description></item><item><title>Build Your Own React (译文)</title><link>https://chemistwang.github.io/post/translate/build-your-own-react/</link><pubDate>Wed, 01 Sep 2021 17:58:34 +0000</pubDate><guid>https://chemistwang.github.io/post/translate/build-your-own-react/</guid><description>参考资料: build-your-own-react 构建自己的 React ⚠️【注】因本人水平有限，部分语句使用意译。会根据水平提升及时修正完善🧐 Rodrigo Pombo November 13, 2019 我们准备一步一步重写 React。下</description></item></channel></rss>