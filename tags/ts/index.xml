<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ts on Chemputer Blog</title><link>https://chemistwang.github.io/tags/ts/</link><description>Recent content in ts on Chemputer Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 07 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://chemistwang.github.io/tags/ts/index.xml" rel="self" type="application/rss+xml"/><item><title>TS配置文件</title><link>https://chemistwang.github.io/post/ts/ts-config/</link><pubDate>Mon, 07 Nov 2022 00:00:00 +0000</pubDate><guid>https://chemistwang.github.io/post/ts/ts-config/</guid><description>strict strict文档 true false The strict flag enables a wide range of type checking behavior that results in stronger guarantees of program correctness. Turning this on is equivalent to enabling all of the strict mode family options, which are outlined below. You can then turn off individual strict mode family checks as needed. Future versions of TypeScript may introduce additional stricter checking under</description></item><item><title>TS 基本玩法</title><link>https://chemistwang.github.io/post/ts/ts-basic/</link><pubDate>Fri, 04 Nov 2022 00:00:00 +0000</pubDate><guid>https://chemistwang.github.io/post/ts/ts-basic/</guid><description>type MyType&amp;lt;T&amp;gt; = T extends any ? T : never; // type res = MyType&amp;lt;string | number | boolean&amp;gt; // 1. 从 T 中剔除 U type Res1 = Exclude&amp;lt;string | number, number&amp;gt; // 2. 从 T 中剔除 null undefined type Res2 = NonNullable&amp;lt;string | number | null | undefined&amp;gt; // 3. 获取函数返回值类型 type Res3 = ReturnType&amp;lt;() =&amp;gt; number&amp;gt;</description></item><item><title>TS Challenges</title><link>https://chemistwang.github.io/post/ts/ts-challenges/</link><pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate><guid>https://chemistwang.github.io/post/ts/ts-challenges/</guid><description>对 ts 的掌握一定要 练，如果在开发中没有条件的话，这有个宝藏的 Github项目🌟 type-challenges Warm-up 1. Hello World // expected to be string type HelloWorld = any // answer type HelloWorld = string Easy 1. Pick interface Todo { title: string description: string completed: boolean</description></item><item><title>TS2559: Type '{ children: never[]; }' has no properties in common with type 'IntrinsicAttributes'.</title><link>https://chemistwang.github.io/post/ts/ts-error2/</link><pubDate>Thu, 29 Sep 2022 00:00:00 +0000</pubDate><guid>https://chemistwang.github.io/post/ts/ts-error2/</guid><description>封装好的组件准备在外层进行调用： interface Props { title: string } function MyComponent(props: Props) { const { title } = props; return &amp;lt;h1&amp;gt;{title}&amp;lt;/h1&amp;gt; } export default MyComponent; 结果 TS 直接报错 ERROR in src/App.tsx:86:6 TS2322: Type &amp;#39;{ children: never[]; title: string; }&amp;#39; is not assignable to type &amp;#39;IntrinsicAttributes &amp;amp; Props&amp;#39;. Property &amp;#39;children&amp;#39; does not exist on</description></item><item><title>Element implicitly has an 'any' type because expression of type 'string' can't be used to index type</title><link>https://chemistwang.github.io/post/ts/ts-error1/</link><pubDate>Thu, 08 Sep 2022 00:00:00 +0000</pubDate><guid>https://chemistwang.github.io/post/ts/ts-error1/</guid><description>问题求解</description></item></channel></rss>